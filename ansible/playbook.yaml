---
- name: Setup Workshop
  hosts: local
  vars:
    internal_registry: "false"
    argo_release_tag: "latest"
    operator_release_tag: "latest"
    git_clone_image_version: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.14.2"
    git_cli_image_version: "docker.io/alpine/git:v2.26.2"
    buildah_image_version: "quay.io/buildah/stable:v1.14.8"
    go_image_version: "registry.redhat.io/rhel8/go-toolset:1.13.4"

  tasks:
  - name: Create bin directory if necessary
    file:
      path: "~/bin"
      state: directory
      mode: "u=rwx,g=rwx,o=rw"

  - import_role:
      name: darthlukan.argocd_install.install_prereqs

  - import_role:
      name: darthlukan.argocd_install.install_argocd
    vars:
      operator_release_tag: "{{ operator_release_tag }}"

  - name: Apply {{ internal_registry }} to manifests
    block:
      - name: Get latest ArgoCD release
        github_release:
          user: argoproj
          repo: argo-cd
          action: latest_release
        register: argocd_release

      - name: Get latest ArgoCD sources
        git:
          repo: https://github.com/argoproj/argo-cd.git
          dest: "{{ playbook_dir }}/temp/argo-cd"
          version: "{{ argocd_release.tag }}"
        when: argo_release_tag == "latest"

      - name: Get {{ argo_release_tag }} ArgoCD sources
        git:
          repo: https://github.com/argoproj/argo-cd.git
          dest: "{{ playbook_dir }}/temp/argo-cd"
          version: "{{ argo_release_tag }}"
        when: argo_release_tag != "latest"

      - name: Set deployment manifest facts
        set_fact:
          redis_deployment_json: "{{ lookup('file', playbook_dir + '/temp/argo-cd/manifests/base/redis/argocd-redis-deployment.yaml') | from_yaml }}"
          dex_deployment_json: "{{ lookup('file', playbook_dir + '/temp/argo-cd/manifests/base/dex/argocd-dex-server-deployment.yaml') | from_yaml }}"
          server_deployment_json: "{{ lookup('file', playbook_dir + '/temp/argo-cd/manifests/base/server/argocd-server-deployment.yaml') | from_yaml }}"

      - name: Set image facts
        set_fact:
          redis_image: "{{ redis_deployment_json.spec.template.spec.containers[0].image }}"
          dex_image: "{{ dex_deployment_json.spec.template.spec.containers[0].image }}"
          server_image: "{{ server_deployment_json.spec.template.spec.containers[0].image }}"

      - name: Set image version and image name facts
        set_fact:
          redis_image_version: "{{ redis_image.split(':')[-1] }}"
          redis_image_name: "{{ redis_image.split(':')[0] }}"
          dex_image_version: "{{ dex_image.split(':')[-1] }}"
          dex_image_name: "{{ dex_image.split(':')[0] }}"
          server_image_version: "{{ server_image.split(':')[-1] }}"
          server_image_name: "{{ server_image.split(':')[0] }}"

      - name: Backup dir for original workshop-argo-cluster-cr manifest exists
        file:
          state: directory
          recurse: true
          path: "{{ playbook_dir }}/original"
          mode: "ugo+rw"

      - name: Backup workshop-argo-cluster-cr
        copy:
          mode: preserve
          src: "{{ playbook_dir }}/files/workshop-argo-cluster-cr.yaml"
          dest: "{{ playbook_dir }}/original/workshop-argo-cluster-cr.yaml"

      - name: Populate workshop-argo-cluster-cr.yaml
        template:
          src: "{{ playbook_dir }}/templates/files/workshop-argo-cluster-cr.yaml.j2"
          dest: "{{ playbook_dir }}/files/workshop-argo-cluster-cr.yaml"
          mode: preserve
          force: true

      - name: temp/argo-cd is absent
        file:
          path: "{{ playbook_dir }}/temp/argo-cd"
          state: "absent"
    when: internal_registry != "false" and state == 'present'

  - name: Create Pipelines Operator Subscription
    k8s:
      kubeconfig: "{{ kubeconfig }}"
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: openshift-pipelines-operator
          namespace: openshift-operators
        spec:
          channel:  ocp-4.4
          name: openshift-pipelines-operator-rh
          source: redhat-operators
          sourceNamespace: openshift-marketplace

  - name: Set external registry image locations
    set_fact:
      git_clone_image: "{{ git_clone_image_version }}"
      git_cli_image: "{{ git_cli_image_version }}"
      buildah_image: "{{ buildah_image_version }}"
      go_image: "{{ go_image_version }}"
    when: internal_registry == "false"

  - name: Set internal registry image locations
    set_fact:
      git_clone_image: "{{ internal_registry }}/{{ git_clone_image_version }}"
      git_cli_image: "{{ internal_registry }}/{{ git_cli_image_version }}"
      buildah_image: "{{ internal_registry }}/{{ buildah_image_version }}"
      go_image: "{{ internal_registry }}/{{ go_image_version }}"
    when: internal_registry != "false"

  - name: Populate Tekton task templates
    template:
      src: "{{ playbook_dir }}/templates/sample-app-ci/{{ item }}.j2"
      dest: "{{ playbook_dir }}/../sample-app-ci/{{ item }}"
      mode: preserve
      force: true
    loop:
      - 10-buildah-task.yaml
      - 10-git-cli-task.yaml
      - 10-git-clone-task.yaml
      - 10-make-sample-app-task.yaml
      - 10-version-increment-task.yaml

  - name: Deploy Tekton pipeline
    k8s:
      namespace: sample-app-ci
      src: "{{ playbook_dir }}/../sample-app-ci/{{ item }}"
      state: "{{ state }}"
      kubeconfig: "{{ kubeconfig }}"
    loop:
      - 01-sample-app-ci-namespace.yaml
      - 02-sample-app-pvc.yaml
      - 10-buildah-task.yaml
      - 10-git-cli-task.yaml
      - 10-git-clone-task.yaml
      - 10-make-sample-app-task.yaml
      - 10-version-increment-task.yaml
      - 20-pipeline.yaml

  # k8s module doesn't currently support generateName: https://github.com/ansible-collections/community.kubernetes/issues/186
  - name: Create PipelineRun
    shell:
      cmd: oc create -f "{{ playbook_dir }}/../sample-app-ci/30-pipeline-run.yaml" -n sample-app-ci

  - name: Deploy workshop applications
    k8s:
      namespace: argocd
      src: "{{ playbook_dir }}/files/{{ item }}"
      state: "{{ state }}"
      kubeconfig: "{{ kubeconfig }}"
    loop:
      - workshop-argo-cluster-cr.yaml
      - workshop-argo-project-cr.yaml
      - workshop-sample-app-cr.yaml
      - workshop-sample-infra-cr.yaml
...
